#include "mayaUtils.h"

#define EPSILON 0.000001

float setRange( float f)
{
   return 0.5 * (1.0 + f);
}
vector planar(vector p)
{
   vector st;
   st[0] = setRange(p[0]);
   st[1] = setRange(p[1]);

   return st;
}

vector spherical(vector p, float uAngle, float vAngle)
{
   vector st;
   vector v = normalize(p);

   st[0] = setRange(atan2(v[0], v[2]) / uAngle);
   st[1] = setRange(atan2(v[1], sqrt(v[0]*v[0] + v[2]*v[2])) / vAngle);

   return st;
}

vector cylindrical(vector p, float uAngle)
{
   vector st;
   vector v = normalize(p);
   st[0] = setRange(atan2(v[0], v[2]) * 2.0/uAngle);
   st[1] = setRange(v[1]);
   return st;
}

vector ball(vector p)
{
   vector st;
   vector v = normalize(p);
   v[2] += 1.0;
   v = normalize(v);
   st[0] = setRange(v[0]);
   st[1] = setRange(v[1]);
   return st;
}

vector cubic(vector p)
{
   vector st;
   float xAbs = abs(p[0]);
   float yAbs = abs(p[1]);
   float zAbs = abs(p[2]);

   float s = 0;
   float t = 0;
   float a = 0;

   if (xAbs >= yAbs && xAbs >= zAbs)
   {
      a = xAbs;
      s = p[2];
      t = p[1];
   }
   else if (yAbs >= xAbs && yAbs >= zAbs)
   {
      a = yAbs;
      s = p[0];
      t = p[2];
   }
   else if (zAbs >= xAbs && zAbs >= yAbs)
   {
      a = zAbs;
      s = p[0];
      t = p[1];
   }
   st[0] = setRange(s / (a + EPSILON));
   st[1] = setRange(t / (a + EPSILON));

   return st;
}

vector triPlanar(vector p, vector N)
{
   vector st;
   float ax = N[0] > 0.0 ? N[0] : -N[0];
   float ay = N[1] > 0.0 ? N[1] : -N[1];
   float az = N[2] > 0.0 ? N[2] : -N[2];

   if (ax > ay && ax > az)
   {
      st[0] = p[2];
      st[1] = p[1];
   }
   else if (ay > ax && ay > az)
   {
      st[0] = p[0];
      st[1] = p[2];
   }
   else
   {
      st[0] = p[0];
      st[1] = p[1];
   }

   st[0] = setRange(st[0]);
   st[1] = setRange(st[1]);

   return st;
}
vector concentric(vector p)
{
  vector st;
  vector noisePoint = vector(0.01 * int(p[0]), 0.01 * int(p[1]), 0.01 * int(p[2]));
  float	temp = noise("perlin", noisePoint);
  st[1] = 0.5 + sin((p[0] - floor(p[0])) * 0.5) * sin((p[1] - floor(p[1])) * 0.5) * sin((p[2] - floor(p[2])) * 0.5);
  st[0] = temp;
  return st;
}
shader projection( int projType = 0, 
				   vector transparency=0, 
				   float uAngle=0, 
				   float vAngle=0, 
				   vector image = vector(1,0,0), 
				   vector uvCoord=0, 
				   matrix placementMatrix = 0, 
				   output vector outUVCoord=0, 
				   MAYA_COLORBALANCE,
				   MAYA_DEFAULT_OUTPUT)
{
	float s = u;
	float t = v;
	if( isconnected(uvCoord))
	{
		s = uvCoord[0];
		t = uvCoord[1];
	}
	vector uvw;
	
	if( projType == 1) //planar
	{
		point PP = transform(placementMatrix, P);
		uvw = planar(PP);
	}
	if( projType == 2) //spherical
	{
		point PP = transform(placementMatrix, P);
		uvw = spherical(PP, uAngle, vAngle);
	}
	if( projType == 3) //cylindrical
	{
		point PP = transform(placementMatrix, P);
		uvw = cylindrical(PP, uAngle);
	}
	if( projType == 4) //ball
	{
		point PP = transform(placementMatrix, P);
		uvw = ball(PP);
	}
	if( projType == 5) //cubic
	{
		point PP = transform(placementMatrix, P);
		uvw = cubic(PP);
	}
	if( projType == 6) //triplanar
	{
		point PP = transform(placementMatrix, P);
		uvw = triPlanar(PP, N);
	}
	if( projType == 7) //concentric
	{
		point PP = transform(placementMatrix, P);
		uvw = concentric(PP);
	}
	outUVCoord = uvw;
	
	outColor = colorBalance(image, colorGain, colorOffset);
}
