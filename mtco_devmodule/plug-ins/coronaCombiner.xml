<fragment uiName="coronaCombiner" name="coronaCombiner" type="plumbing" class="ShadeFragment" version="1.0">
	<description><![CDATA[Combines ambient, diffuse, specular components additively]]></description>
	<properties>
		<float3 name="diffuseIrradIn" flags="constantParam" />
		<float3 name="specularIrradIn" flags="constantParam" />
    <float3 name="diffuseColor"/>
    <float3 name="opacity"/>
    <float3 name="refractivity"/>
    <float3 name="emission"/>
    <float  name="emissionMultiplier"/>
    <float  name="refractivityMultiplier"/>
    <float  name="diffuseMultiplier"/>
  </properties>
	<values>
		<float3 name="diffuseIrradIn" value="0.0,0.0,0.0" />
    <float3 name="specularIrradIn" value="0.0,0.0,0.0" />
    <float3 name="diffuseColor" value="0.0,0.0,0.0" />
    <float3 name="opacity" value="1.0,1.0,1.0" />
    <float3 name="refractivity" value="0.0,0.0,0.0" />
    <float3 name="emission" value="0.0,0.0,0.0" />
    <float  name="emissionMultiplier" value="0.0" />
    <float  name="refractivityMultiplier" value="0.0" />
    <float  name="diffuseMultiplier" value="1.0" />
  </values>
	<outputs>
    <struct name="coronaCombinerOutput" struct_name="mayaSurfaceShaderOutput" />
	</outputs>
	<implementation>
	<implementation render="OGSRenderer" language="Cg" lang_version="2.1">
		<function_name val="coronaCombiner" />
		<source>
      <![CDATA[
mayaSurfaceShaderOutput coronaCombiner(
	float3 diffuseIrradIn,
	float3 specularIrradIn,
  float3 diffuseColor,
  float3 opacity,
  float3 refractivity,
  float3 emission,
  float  emissionMultiplier,
  float  refractivityMultiplier,
  float  diffuseMultiplier
  )
{
  float3 transparency = 1.0 - opacity;
  float r = (refractivity.x + refractivity.y + refractivity.z)/3.0 * refractivityMultiplier;
  if( r > 0 )
     transparency = 1.0 - (opacity * (1.0 - r));
	mayaSurfaceShaderOutput result;
  result.outColor = diffuseIrradIn * diffuseColor * diffuseMultiplier + emission * emissionMultiplier;
  result.outTransparency = transparency;
  float3 outOpacity = saturate(1.0f - transparency);
  result.outColor *= outOpacity;
  const float3 intenseVec = float3(0.3333, 0.3333, 0.3333);
  result.outSurfaceFinal = float4(result.outColor, dot(outOpacity, intenseVec)); 
  return result;
}
		]]></source>
	</implementation>
	<implementation render="OGSRenderer" language="HLSL" lang_version="11.0">
		<function_name val="coronaCombiner" />
		<source><![CDATA[]]></source>
	</implementation>
	<implementation render="OGSRenderer" language="GLSL" lang_version="3.0">
		<function_name val="coronaCombiner" />
		<source><![CDATA[]]></source>
	</implementation>
	</implementation>
</fragment>

<!--
		<float3 name="color" />
		<float3 name="transparency" />
		<float3 name="ambientColor" />
		<float3 name="ambientIn" />
		<float3 name="incandescence" />

		<float3 name="color" value="0.5,0.5,0.5" />
		<float3 name="transparency" value="0.0,0.0,0.0" />
		<float3 name="ambientColor" value="0.0,0.0,0.0" />
		<float3 name="ambientIn" value="0.0,0.0,0.0" />
		<float3 name="incandescence" value="0.0,0.0,0.0" />


mayaSurfaceShaderOutput coronaCombiner(
	float3 diffuseIrradIn,
	float3 specularIrradIn,
	float3 color,
	float3 transparency,
	float3 ambientColor,
	float3 ambientIn,
	float3 incandescence)
{
	mayaSurfaceShaderOutput result;
	result.outColor = (ambientColor+ambientIn)*color;
	result.outColor += diffuseIrradIn*color;
	float3 opacity = saturate(1.0f - transparency); 
	result.outColor *= opacity;
	result.outColor += specularIrradIn;
	result.outColor += incandescence;
	result.outTransparency = transparency;
	const float3 intenseVec = float3(0.3333, 0.3333, 0.3333); 
	result.outSurfaceFinal = float4(result.outColor, dot(opacity, intenseVec)); 
	return result;
}

-->